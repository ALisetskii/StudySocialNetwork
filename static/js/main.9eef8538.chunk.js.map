{"version":3,"sources":["assets/images/user.png","api/api.js","redux/dialogs-reducer.js","components/Users/users.module.css","assets/images/preloader.svg","components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.js","serviceWorker.js","components/Navbar/Navbar.jsx","untils/object-helpers.js","redux/users-reducer.js","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx","components/Header/Header.jsx","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","redux/app-reducer.js","redux/sidebar-reducer.js","redux/redux-store.js","hoc/withSuspense.js","App.js","index.js","components/common/Preloader/Preloader.js","untils/validators/validators.js","components/common/FormsControls/FormControls.module.css","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.js"],"names":["module","exports","instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","profileAPI","authAPI","me","login","email","password","rememberMe","captcha","logout","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","securityAPI","getCaptcha","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","component","validators","text","validate","Boolean","window","location","hostname","match","Navbar","nav","item","to","activeClassName","activeLink","active","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","key","e","User","user","src","photos","small","userPhoto","alt","disabled","some","Users","usersPage","getPageSize","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","this","Preloader","React","Component","compose","connect","bind","totalCount","Header","header","loginBlock","isAuth","SET_USER_DATA","captchaUrl","setAuthUserData","payload","getAuthUserData","getCaptchaUrl","url","captchaURL","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","formSummaryError","length","stopSubmit","_error","initialized","globalError","appReducer","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","promiseRejectonEvent","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","style","backgroundColor","preloader","value","maxLengthCreator","maxLength","posts","likesCount","newPostText","profileUpdateStatus","addPostActionCreator","setStatus","getUserProfile","file","getState","Promise","reject","newPost","postId"],"mappings":"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","file":"static/js/main.9eef8538.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","import * as axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"d815e466-8076-4a88-8dcb-7a359475031b\"\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false, captcha = null) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    },\r\n    savePhoto(photoFile) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile)\r\n        return instance.put(`profile/photo`, formData,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n        );\r\n    },\r\n    saveProfile(profile) {\r\n        return instance.put(`profile/`, profile);\r\n    }\r\n}\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    },\r\n}\r\n\r\n","const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ],\r\n\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody) => ({type: SEND_MESSAGE, newMessageBody})\r\nexport const updateNewMessageBodyCreator = (body) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body})\r\n\r\nexport default dialogsReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__34QKd\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.b7974037.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3MJiS\",\"item\":\"Navbar_item__22SpW\",\"activeLink\":\"Navbar_activeLink__z2C_k\"};","import React from \"react\";\r\nimport s from './FormControls.module.css'\r\nimport {required} from \"../../../untils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\n/*export const Textarea = ({input,meta,...props}) => {\r\nconst hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error:'')}>\r\n            <div>\r\n            <textarea {...input} {...props} />\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n</div>\r\n)\r\n}\r\n\r\n\r\nexport const Input = ({input,meta,...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error:'')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n/*\r\n\r\n\r\nconst Element = Element => ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={ s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n            <Element {...input} {...props} />\r\n            { hasError && <span> { meta.error } </span> }\r\n        </div>\r\n    );\r\n};\r\n\r\nА потом просто его импортим в компоненту формы, вызываем как\r\n\r\nconst Textarea = Element(\"textarea\");\r\n\r\nи передаем\r\n\r\n<Field component={Textarea} .../>\r\n\r\nВсе работает!)*/\r\n\r\n\r\nexport const createField = (placeholder, name, component, validators, props = {}, text = '') => {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {authAPI, usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../untils/object-helpers\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n};\r\n\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n\r\n            return {\r\n                ...state,\r\n\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                /*  users: state.users.map(u => {\r\n                      if (u.id === action.userId) {\r\n                          return {...u, followed: true}\r\n                      }\r\n                      return u;\r\n                  })*/\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                /* users: state.users.map(u => {\r\n                     if (u.id === action.userId) {\r\n                         return {...u, followed: false}\r\n                     }\r\n                     return u;\r\n                 })*/\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport const requestUsers = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(currentPage))\r\n        let response = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(response.items));\r\n        dispatch(setTotalUsersCount(response.totalCount));\r\n\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.follow.bind(usersAPI)\r\n        await followUnfollowFlow(dispatch, userId, apiMethod, followSuccess)\r\n\r\n\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n        await followUnfollowFlow(dispatch, userId, apiMethod, unfollowSuccess)\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n","import React, {useState} from 'react';\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow,}) => {\r\n    return <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ?\r\n                            user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}\r\n                             alt={''}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n        <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n    </div>\r\n}\r\n\r\n\r\nexport default User;\r\n","import React from 'react';\r\n\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\nlet Users = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n    return <div>\r\n        <Paginator currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}/>\r\n        <div>\r\n            {users.map(u => <User user={u}\r\n                                  followingInProgress={props.followingInProgress}\r\n                                  unfollow={props.unfollow}\r\n                                  follow={props.follow}\r\n                                  key={u.id}/>\r\n            )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;\r\n","import {createSelector} from \"reselect\";\r\n\r\nexport const getUsers = (state) => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getUsersSuperSelector = createSelector(getUsers,\r\n    (users) => {\r\n        return users.filter(u => true);\r\n    })\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow, toggleFollowingProgress, requestUsers\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers,\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        const {pageSize} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n/*let mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {follow, unfollow, setCurrentPage, toggleFollowingProgress, requestUsers})\r\n)(UsersContainer)\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png'/>\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div> {props.login} - <button onClick={props.logout}>Log Out</button></div>\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;\r\n","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai_network/auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai_network/auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null // if null then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n        case SET_USER_DATA:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n})\r\nexport const getCatchaUrlSuccess = (captchaUrl) =>\r\n    ({type: SET_USER_DATA, payload: {captchaUrl}})\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\n\r\nexport const logout = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n\r\n}\r\n\r\nexport const getCaptchaUrl = (url) => async (dispatch) => {\r\n\r\n    let response = await securityAPI.getCaptcha(url)\r\n\r\n    const captchaURL = response.data.url\r\n    dispatch(getCatchaUrlSuccess(captchaURL));\r\n\r\n}\r\n\r\n\r\nexport default authReducer;\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../untils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from '../common/FormsControls/FormControls.module.css'\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {createField('Email', 'email', Input, [required])}\r\n        {createField('Password', 'password', Input, [required], {type: 'password'})}\r\n        {createField(null, 'rememberMe', Input, [], {type: 'checkbox'}, 'remember me')}\r\n\r\n        {/* <Field placeholder={'Email'}\r\n                   name={'email'}\r\n                   component={Input}\r\n                   validate={[required]}\r\n            />*/}\r\n        {/*<div>\r\n            <Field placeholder={'Password'}\r\n                   name={'password'}\r\n                   component={Input}\r\n                   type={'password'}\r\n                   validate={[required]}\r\n            />\r\n        </div>*/}\r\n        {/*<div>\r\n            <Field component={Input}\r\n                   name={'rememberMe'}\r\n                   type={'checkbox'}\r\n\r\n            /> remember me\r\n        </div>*/}\r\n\r\n        {captchaUrl && <img src={captchaUrl}/>}\r\n        {captchaUrl && createField('Symbols from image', 'captcha', Input, [required])}\r\n        {error && <div className={s.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button>Log in</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1> LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n});\r\nexport default connect(mapStateToProps, {login})(Login);\r\n","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    globalError: null,  // доделать дисптч и отображение ошибки thunk->dispatch(показать->thunk(спрятать ерор по таймауту)\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const initialisedSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(initialisedSuccess());\r\n    })\r\n\r\n}\r\n/*export const initializeApp = () => async (dispatch) => {\r\n    await dispatch(getAuthUserData());\r\n    dispatch(setInitializedSuccess());\r\n};*/\r\n\r\nexport default appReducer;\r\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//let store = createStore(reducers, applyMiddleware(thunkMiddleware),);\r\n\r\nwindow.__store__ = store;\r\n\r\n\r\nexport default store;\r\n","import React, {Suspense} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n\r\n    return (props) => {\r\n        return <Suspense fallback={<div><Preloader/></div>}>\r\n            <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n\r\n}\r\n","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\n\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport store from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n//import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component {\r\n    catchAllUnhandledErrors = (reason, promiseRejectonEvent) => {\r\n      //  alert('some error occured')\r\n      //  console.error(promiseRejectonEvent)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route exact path='/'\r\n                               render={() => <Redirect to={'profile'}/>}/>\r\n\r\n                        <Route path='/dialogs'\r\n                               render={withSuspense(DialogsContainer)}/>\r\n\r\n                        <Route path='/profile/:userId?'\r\n                               render={withSuspense(ProfileContainer)}/>\r\n\r\n                        <Route path='/users'\r\n                               render={() => <UsersContainer/>}/>\r\n\r\n                        <Route path='/login'\r\n                               render={() => <LoginPage/>}/>\r\n\r\n                        <Route path='*'\r\n                               render={() => <div>404 NOT FOUND</div>}/>\r\n\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\n\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nconst SamuraiJSApp = (props) => {\r\n    return (\r\n        /*<HashRouter> for github*/  /*basename={process.env.PUBLIC_URL}*/\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n            {/* </HashRouter>*/}\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default SamuraiJSApp\r\n","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\nReactDOM.render(\r\n    <SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div style={{backgroundColor: 'white'}}>\r\n        <img src={preloader} alt={''}/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n","export const required = value => {\r\n\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\nexport const maxLength30 = value => {\r\n\r\n    if (value && value.length > 30) return 'Max length is 30 symbols';\r\n    return 'Field is required'\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1wUY4\",\"error\":\"FormControls_error__2MHrb\",\"formSummaryError\":\"FormControls_formSummaryError__2jCNt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3_c4E\",\"pageNumber\":\"Paginator_pageNumber__3otYe\",\"selectedPage\":\"Paginator_selectedPage__1xl2T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__27kSy\",\"loginBlock\":\"Header_loginBlock__2g5v2\"};","import {authAPI, profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\nconst SAVE_PROFILE_SUCCESS = 'SAVE_PROFILE_SUCCESS'\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ],\r\n    newPostText: 'it-kamasutra.com',\r\n    profile: null,\r\n    status: '',\r\n    profileUpdateStatus: 'none' // доделать передачу ошибки из формы ProfileDataForm\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n\r\n            };\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText) => ({type: ADD_POST, newPostText})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const deletepost = (postId) => ({type: DELETE_POST, postId})\r\nexport const savePhotoSuccess = (photos) => ({type: SAVE_PHOTO_SUCCESS, photos})\r\nexport const saveProfileSuccess = (profile) => ({type: SAVE_PROFILE_SUCCESS, profile})\r\n\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data));\r\n\r\n}\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data));\r\n\r\n}\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n    try {\r\n\r\n\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    } catch (error) {\r\n        //error.message отобразить\r\n    }\r\n}\r\nexport const savePhoto = (file) => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile) => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    let response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId));\r\n    } else {\r\n        // {'contacts':{'facebook': response.data.messages[0]}}\r\n        dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}))\r\n        return Promise.reject()\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default profileReducer;\r\n"],"sourceRoot":""}