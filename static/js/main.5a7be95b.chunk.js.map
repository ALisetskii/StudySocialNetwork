{"version":3,"sources":["api/api.js","redux/dialogs-reducer.js","components/Users/users.module.css","assets/images/user.png","assets/images/preloader.svg","components/Navbar/Navbar.module.css","serviceWorker.js","components/Navbar/Navbar.jsx","untils/object-helpers.js","redux/users-reducer.js","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","redux/users-selectors.js","components/Users/UsersContainer.jsx","components/Header/Header.jsx","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","redux/app-reducer.js","redux/sidebar-reducer.js","redux/redux-store.js","hoc/withSuspense.js","App.js","index.js","components/common/FormsControls/FormsControls.js","components/common/Preloader/Preloader.js","components/common/FormsControls/FormControls.module.css","untils/validators/validators.js","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.js"],"names":["instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","profileAPI","authAPI","me","login","email","password","rememberMe","logout","getStatus","updateStatus","status","put","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","key","e","User","user","src","photos","small","userPhoto","alt","disabled","some","Users","props","usersPage","getPageSize","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","this","Preloader","React","Component","compose","connect","bind","totalCount","Header","header","loginBlock","isAuth","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","Input","required","formSummaryError","length","stopSubmit","_error","formData","initialized","appReducer","sidebarReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","AppContainer","withRouter","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","input","meta","touched","children","hasError","formControl","Textarea","restProps","child","placeholder","component","validators","text","validate","style","backgroundColor","preloader","value","maxLengthCreator","maxLength","posts","likesCount","newPostText","profile","addPostActionCreator","setStatus","getUserProfile","newPost","postId"],"mappings":"mIAAA,mHAGMA,EAAWC,SAAa,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAa,CACT,UAAW,0CAKNC,EAAW,CACpBC,SADoB,WACsB,IAAjCC,EAAgC,uDAAlB,EAAGC,EAAe,uDAAJ,GACjC,OAAOR,EAASS,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAClDE,MAAK,SAAAC,GACF,OAAOA,EAASC,SAG5BC,OAPoB,SAObC,GACH,OAAOd,EAASe,KAAT,iBAAwBD,KAEnCE,SAVoB,SAUXF,GACL,OAAOd,EAASiB,OAAT,iBAA0BH,KAErCI,WAboB,SAaTJ,GACP,OAAOK,EAAWD,WAAWJ,KAIxBM,EAAU,CACnBC,GADmB,WAEf,OAAOrB,EAASS,IAAT,YAEXa,MAJmB,SAIbC,EAAMC,GAA2B,IAAlBC,EAAiB,wDAClC,OAAOzB,EAASe,KAAT,aAA4B,CAACQ,QAAMC,WAASC,gBAEvDC,OAPmB,WAQf,OAAO1B,EAASiB,OAAT,gBAGFE,EAAa,CAEtBD,WAFsB,SAEXJ,GACP,OAAOd,EAASS,IAAI,WAAaK,IAErCa,UALsB,SAKZb,GACN,OAAOd,EAASS,IAAI,kBAAoBK,IAE5Cc,aARsB,SAQTC,GACT,OAAO7B,EAAS8B,IAAT,iBAA8B,CAACD,OAAOA,O,sFC/CjDE,EAAe,CACfC,QAAS,CACL,CAACC,GAAI,EAAGC,KAAM,UACd,CAACD,GAAI,EAAGC,KAAM,UACd,CAACD,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,UACd,CAACD,GAAI,EAAGC,KAAM,WAElBC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,MACjB,CAACH,GAAI,EAAGG,QAAS,6BACjB,CAACH,GAAI,EAAGG,QAAS,MACjB,CAACH,GAAI,EAAGG,QAAS,MACjB,CAACH,GAAI,EAAGG,QAAS,QAmBZC,EAAqB,SAACC,GAAD,MAAqB,CAACC,KAnCnC,eAmCuDD,mBAI7DE,IAlBQ,WAAmC,IAAlCC,EAAiC,uDAAzBV,EAAcW,EAAW,uCACrD,OAAQA,EAAOH,MAEX,IAxBa,eAyBT,IAAII,EAAOD,EAAOJ,eAClB,OAAO,2BACAG,GADP,IAEIN,SAAS,GAAD,mBAAMM,EAAMN,UAAZ,CAAsB,CAACF,GAAI,EAAGG,QAASO,OAEvD,QACI,OAAOF,K,oBC/BnBG,EAAOC,QAAU,CAAC,UAAY,2B,oBCD9BD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,qGCC3CD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,wCCWjEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gHCYSC,EA1BA,WACX,OACI,yBAAKC,UAAWC,IAAEC,KACd,yBAAKF,UAAWC,IAAEE,MACd,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,YAA1C,YAEJ,yBAAKN,UAAS,UAAKC,IAAEE,KAAP,YAAeF,IAAEM,SAC3B,kBAAC,IAAD,CAASH,GAAG,WAAWC,gBAAiBJ,IAAEK,YAA1C,aAEJ,yBAAKN,UAAS,UAAKC,IAAEE,KAAP,YAAeF,IAAEM,SAC3B,kBAAC,IAAD,CAASH,GAAG,SAASC,gBAAiBJ,IAAEK,YAAxC,UAGJ,yBAAKN,UAAWC,IAAEE,MACd,oCAEJ,yBAAKH,UAAWC,IAAEE,MACd,qCAEJ,yBAAKH,UAAWC,IAAEE,MACd,0C,+DCxBHK,EAAsB,SAACC,EAAMC,EAAOC,EAAYC,GAEzD,OAAOH,EAAMI,KAAI,SAAAC,GACb,OAAIA,EAAEH,KAAiBD,EACZ,2BAAII,GAAMF,GAEdE,MCKXnC,EAAe,CACfoC,MAAO,GACP3D,SAAU,GACV4D,gBAAiB,EACjB7D,YAAa,EACb8D,YAAY,EACZC,oBAAqB,IAwDZC,EAAgB,SAACzD,GAAD,MAAa,CAACyB,KAtE5B,SAsE0CzB,WAC5C0D,EAAkB,SAAC1D,GAAD,MAAa,CAACyB,KAtE5B,WAsE4CzB,WAEhD2D,EAAiB,SAAClE,GAAD,MAAkB,CAACgC,KAtExB,mBAsEgDhC,gBAE5DmE,EAAmB,SAACL,GAAD,MAAiB,CAAC9B,KAtEvB,qBAsEiD8B,eAC/DM,EAA0B,SAACN,EAAYvD,GAAb,MAAyB,CAC5DyB,KAvEiC,+BAwEjC8B,aACAvD,WAeE8D,EAAkB,uCAAE,WAAMC,EAAS/D,EAAOgE,EAAUC,GAAhC,SAAAC,EAAA,6DACtBH,EAASF,GAAwB,EAAM7D,IADjB,SAEDgE,EAAUhE,GAFT,OAIW,IAJX,OAITF,KAAKqE,YACdJ,EAASE,EAAcjE,IAE3B+D,EAASF,GAAwB,EAAO7D,IAPlB,2CAAF,4DA2BToE,EAvGM,WAAmC,IAAlCzC,EAAiC,uDAAzBV,EAAcW,EAAW,uCACnD,OAAQA,EAAOH,MACX,IApBO,SAsBH,OAAO,2BACAE,GADP,IAGI0B,MAAMP,EAAoBnB,EAAM0B,MAAMzB,EAAO5B,OAAO,KAAK,CAACqE,UAAU,MAQ5E,IAhCS,WAiCL,OAAO,2BACA1C,GADP,IAEI0B,MAAMP,EAAoBnB,EAAM0B,MAAMzB,EAAO5B,OAAO,KAAK,CAACqE,UAAU,MAQ5E,IA1CU,YA2CN,OAAO,2BAAI1C,GAAX,IAAkB0B,MAAOzB,EAAOyB,QAEpC,IA5CiB,mBA6Cb,OAAO,2BAAI1B,GAAX,IAAkBlC,YAAamC,EAAOnC,cAE1C,IA9CsB,wBA+ClB,OAAO,2BAAIkC,GAAX,IAAkB2B,gBAAiB1B,EAAO0C,QAE9C,IAhDmB,qBAiDf,OAAO,2BAAI3C,GAAX,IAAkB4B,WAAY3B,EAAO2B,aAEzC,IAlD6B,+BAmDzB,OAAO,2BACA5B,GADP,IAEI6B,oBAAqB5B,EAAO2B,WAAP,sBACX5B,EAAM6B,qBADK,CACgB5B,EAAO5B,SACtC2B,EAAM6B,oBAAoBe,QAAO,SAAApD,GAAE,OAAIA,IAAOS,EAAO5B,YAGnE,QACI,OAAO2B,I,4DCzBJ6C,EAtCC,SAAC,GAKb,IALyF,IAA3EC,EAA0E,EAA1EA,gBAAgB/E,EAA0D,EAA1DA,SAASD,EAAiD,EAAjDA,YAAYiF,EAAqC,EAArCA,cAAqC,IAAtBC,mBAAsB,MAAR,GAAQ,EAEpFC,EAAaC,KAAKC,KAAKL,EAAkB/E,GAEzCqF,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAEf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GAR8C,EAShDQ,mBAAS,GATuC,mBASnFC,EATmF,KASpEC,EAToE,KAUpFC,GAAyBF,EAAgB,GAAKT,EAAc,EAC5DY,EAAyBH,EAAgBT,EAI7C,OAAO,yBAAKrC,UAAWkD,IAAOC,WACxBL,EAAgB,GAClB,4BAAQM,QAAS,WAAQL,EAAiBD,EAAgB,KAA1D,QAECL,EACIR,QAAO,SAAAoB,GAAC,OAAIA,GAAKL,GAAyBK,GAAGJ,KAC7CpC,KAAI,SAACwC,GACF,OAAO,0BAAMrD,UAAYsD,IAAG,eACvBJ,IAAOK,aAAepG,IAAgBkG,GACxCH,IAAOM,YACGC,IAAKJ,EACLD,QAAS,SAACM,GACNtB,EAAciB,KACdA,MAG3BT,EAAeE,GACjB,4BAAQM,QAAS,WAAQL,EAAiBD,EAAgB,KAA1D,U,oCCQWa,EAtCJ,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,KAAM1C,EAA6C,EAA7CA,oBAAqBtD,EAAwB,EAAxBA,SAAUH,EAAc,EAAdA,OAC9C,OAAO,6BACK,8BACI,6BACG,kBAAC,IAAD,CAAS2C,GAAI,YAAcwD,EAAK/E,IAC/B,yBAAKgF,IAA0B,MAArBD,EAAKE,OAAOC,MAClBH,EAAKE,OAAOC,MAAQC,IACnBhE,UAAWkD,IAAOc,UACvBC,IAAK,OAGT,6BACKL,EAAK7B,SACA,4BAAQmC,SAAUhD,EACfiD,MAAK,SAAAtF,GAAE,OAAIA,IAAO+E,EAAK/E,MAClBuE,QAAS,WAAQxF,EAASgG,EAAK/E,MAFvC,YAIA,4BAAQqF,SAAUhD,EAAoBiD,MAAK,SAAAtF,GAAE,OAAIA,IAAO+E,EAAK/E,MACrDuE,QAAS,WAAQ3F,EAAOmG,EAAK/E,MADrC,YAMd,8BACI,8BACI,6BAAM+E,EAAK9E,MACX,6BAAM8E,EAAKnF,SAEf,8BACI,6BAAM,yBACN,6BAAM,0BCZf2F,EAnBH,SAAC,GAA8E,IAA7EjH,EAA4E,EAA5EA,YAAaiF,EAA+D,EAA/DA,cAAepB,EAAgD,EAAhDA,gBAAiB5D,EAA+B,EAA/BA,SAAU2D,EAAqB,EAArBA,MAAUsD,EAAW,oFAEtF,OAAO,6BACH,kBAAC,EAAD,CAAWlH,YAAaA,EACbiF,cAAeA,EACfD,gBAAiBnB,EACjB5D,SAAUA,IACrB,6BACK2D,EAAMF,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAM8C,KAAM9C,EACNI,oBAAqBmD,EAAMnD,oBAC3BtD,SAAUyG,EAAMzG,SAChBH,OAAQ4G,EAAM5G,OACdgG,IAAK3C,EAAEjC,W,wBChB5B3B,EAAW,SAACmC,GACrB,OAAOA,EAAMiF,UAAUvD,OAOdwD,GALwBC,YAAetH,GAChD,SAAC6D,GACG,OAAOA,EAAMkB,QAAO,SAAAnB,GAAC,OAAE,QAGJ,SAACzB,GACxB,OAAOA,EAAMiF,UAAUlH,WAGdqH,EAAqB,SAACpF,GAC/B,OAAOA,EAAMiF,UAAUtD,iBAGd0D,EAAiB,SAACrF,GAC3B,OAAOA,EAAMiF,UAAUnH,aAEdwH,EAAgB,SAACtF,GAC1B,OAAOA,EAAMiF,UAAUrD,YAGd2D,GAAyB,SAACvF,GACnC,OAAOA,EAAMiF,UAAUpD,qBCNrB2D,G,4MAMFzC,cAAgB,SAACoB,GAAgB,IACtBpG,EAAU,EAAKiH,MAAfjH,SACP,EAAKiH,MAAMS,aAAatB,EAAYpG,I,kEAPnB,IAAD,EACa2H,KAAKV,MAA3BlH,EADS,EACTA,YAAYC,EADH,EACGA,SACnB2H,KAAKV,MAAMS,aAAa3H,EAAaC,K,+BASrC,OAAO,oCACD2H,KAAKV,MAAMpD,WAAa,kBAAC+D,EAAA,EAAD,MAAgB,KAC1C,kBAAC,EAAD,CAAOhE,gBAAiB+D,KAAKV,MAAMrD,gBACvB5D,SAAU2H,KAAKV,MAAMjH,SACrBD,YAAa4H,KAAKV,MAAMlH,YACxBiF,cAAe2C,KAAK3C,cACpBrB,MAAOgE,KAAKV,MAAMtD,MAClBtD,OAAQsH,KAAKV,MAAM5G,OACnBG,SAAUmH,KAAKV,MAAMzG,SACrBsD,oBAAqB6D,KAAKV,MAAMnD,2B,GArB3B+D,IAAMC,WAkDpBC,eACXC,aAbkB,SAAC/F,GACnB,MAAO,CACH0B,MAAO7D,EAASmC,GAChBjC,SAAUmH,EAAYlF,GACtB2B,gBAAiByD,EAAmBpF,GACpClC,YAAauH,EAAerF,GAC5B4B,WAAY0D,EAActF,GAC1B6B,oBAAqB0D,GAAuBvF,MAMxB,CAAC5B,OLoCP,SAACC,GACnB,8CAAO,WAAO+D,GAAP,eAAAG,EAAA,6DACCF,EAAYzE,IAASQ,OAAO4H,KAAKpI,KADlC,SAEGuE,EAAmBC,EAAU/D,EAAQgE,EAAWP,GAFnD,2CAAP,uDKrCiCvD,SL4Cb,SAACF,GACrB,8CAAO,WAAO+D,GAAP,eAAAG,EAAA,6DACCF,EAAYzE,IAASW,SAASyH,KAAKpI,KADpC,SAEGuE,EAAmBC,EAAU/D,EAAQgE,EAAWN,GAFnD,2CAAP,uDK7C2CC,iBAAgBE,0BAAyBuD,aLc5D,SAAC3H,EAAaC,GACtC,8CAAO,WAAOqE,GAAP,eAAAG,EAAA,6DACHH,EAASH,GAAiB,IAC1BG,EAASJ,EAAelE,IAFrB,SAGkBF,IAASC,SAASC,EAAaC,GAHjD,OAGCG,EAHD,OAIHkE,EAASH,GAAiB,IAC1BG,EAhB4B,CAACtC,KAtEnB,YAsEoC4B,MAgB5BxD,EAASkD,QAC3BgB,EAfgD,CAACtC,KAtE3B,wBAsEwD6C,MAelDzE,EAAS+H,aANlC,2CAAP,yDKhBWH,CAEbN,I,oBCxDaU,GAZA,SAAClB,GACZ,OAAO,4BAAQrE,UAAWC,KAAEuF,QACxB,yBAAK3B,IAAI,6DAET,yBAAK7D,UAAWC,KAAEwF,YACZpB,EAAMqB,OACF,iCAAOrB,EAAMnG,MAAb,MAAsB,4BAAQkF,QAASiB,EAAM/F,QAAvB,WAAtB,MACA,kBAAC,IAAD,CAAS8B,GAAI,UAAb,Y,SCRZuF,GAAgB,qCAGlBhH,GAAe,CACfjB,OAAQ,KACRS,MAAO,KACPD,MAAO,KACPwH,QAAQ,GAmBCE,GAAkB,SAAClI,EAAQS,EAAOD,EAAMwH,GAAtB,MAAkC,CAACvG,KAAMwG,GAAeE,QAAS,CAACnI,SAAQS,QAAOD,QAAMwH,YAEzGI,GAAkB,yDAAM,WAAOrE,GAAP,uBAAAG,EAAA,sEACZ5D,IAAQC,KADI,OAEQ,KADrCV,EAD6B,QAEZC,KAAKqE,aAAmB,EACRtE,EAASC,KAAKA,KAAlCqB,EAD2B,EAC3BA,GAAIX,EADuB,EACvBA,MAAOC,EADgB,EAChBA,MAChBsD,EAASmE,GAAgB/G,EAAIV,EAAOD,GAAM,KAJrB,2CAAN,uDA8BhB6H,GAhDK,WAAmC,IAAlC1G,EAAiC,uDAAzBV,GAAcW,EAAW,uCAClD,OAAQA,EAAOH,MACX,KAAKwG,GAED,OAAO,2BACAtG,GACAC,EAAOuG,SAIlB,QACI,OAAOxG,IClBb2G,G,uKAIE,OAAO,kBAAC,GAAWjB,KAAKV,W,GAJFY,IAAMC,WAYrBE,gBALS,SAAC/F,GAAD,MAAY,CAChCqG,OAAQrG,EAAM4G,KAAKP,OACnBxH,MAAOmB,EAAM4G,KAAK/H,SAGkB,CAACI,ODiCnB,SAACH,EAAMC,EAASC,GAAhB,8CAA+B,WAAOoD,GAAP,SAAAG,EAAA,sEAC5B5D,IAAQM,SADoB,OAGR,IAHQ,OAG5Bd,KAAKqE,YACdJ,EAASmE,GAAgB,KAAK,KAAK,MAAK,IAJH,2CAA/B,wDCjCPR,CAAmCY,I,gDCyB5CE,GAAiBC,aAAU,CAACC,KAAM,SAAjBD,EAlCL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC9B,OAAO,0BAAMC,SAAUF,GAClBG,aAAY,QAAS,QAASC,KAAO,CAACC,OACtCF,aAAY,WAAY,WAAYC,KAAO,CAACC,MAAU,CAACvH,KAAK,aAC5DqH,aAAY,KAAM,aAAcC,KAAO,GAAG,CAACtH,KAAK,YAAY,eAqB5DmH,GAAS,yBAAKtG,UAAWC,KAAE0G,kBACvBL,GAEL,6BACI,+CAuBGlB,gBAJS,SAAC/F,GAAD,MAAY,CAChCqG,OAAQrG,EAAM4G,KAAKP,UAGiB,CAACxH,MFtBpB,SAACC,EAAMC,EAASC,GAAhB,8CAA+B,WAAOoD,GAAP,iBAAAG,EAAA,sEAE3B5D,IAAQE,MAAMC,EAAOC,EAAUC,GAFJ,OAIf,KAF7Bd,EAF4C,QAInCC,KAAKqE,WACdJ,EAASqE,OAEL9G,EAAUzB,EAASC,KAAKuB,SAAS6H,OAAS,EAAIrJ,EAASC,KAAKuB,SAAS,GAAK,aAC9E0C,EAASoF,aAAW,QAAS,CAACC,OAAQ9H,MARM,2CAA/B,wDEsBNoG,EAhBD,SAACf,GAIX,OAAIA,EAAMqB,OACC,kBAAC,IAAD,CAAUtF,GAAI,aAElB,6BACH,sCACA,kBAAC8F,GAAD,CAAgBK,SARH,SAACQ,GACd1C,EAAMnG,MAAM6I,EAAS5I,MAAO4I,EAAS3I,SAAU2I,EAAS1I,mBCxC5DM,GAAe,CACfqI,aAAa,GAiCFC,GA9BI,WAAmC,IAAlC5H,EAAiC,uDAAzBV,GAAcW,EAAW,uCACjD,OAAQA,EAAOH,MACX,IAToB,sBAWhB,OAAO,2BACAE,GADP,IAEI2H,aAAa,IAIrB,QACI,OAAO3H,I,mBCtBfV,GAAe,GAMJuI,GAJQ,WAAmC,IAAlC7H,EAAiC,uDAAzBV,GAC5B,OAAOU,G,oBCQP8H,GAAWC,YAAgB,CAC3BC,YAAaC,KACbC,YAAanI,KACboI,QAASN,GACT5C,UAAWxC,EACXmE,KAAMF,GACNK,KAAMqB,KACNC,IAAIT,KAEFU,GAAmBhI,OAAOiI,sCAAwCzC,IAClE0C,GAAQC,YAAYX,GAAUQ,GAAiBI,YAAgBC,QAIrErI,OAAOsI,UAAYJ,GAGJA,UCnBFK,GAAe,SAAChD,GAGzB,OAAO,SAACb,GACJ,OAAO,kBAAC,WAAD,CAAU8D,SAAU,6BAAK,kBAACnD,EAAA,EAAD,QAChC,kBAACE,EAAcb,MCGjB+D,GAAmBnD,IAAMoD,MAAK,kBAAM,iCACpCC,GAAmBrD,IAAMoD,MAAK,kBAAM,iCAEpCE,G,kLAGExD,KAAKV,MAAMmE,kB,+BAIX,OAAKzD,KAAKV,MAAM2C,YAKZ,yBAAKhH,UAAU,eACX,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAOyI,KAAK,WACLC,OAAQR,GAAaE,MAE5B,kBAAC,IAAD,CAAOK,KAAK,oBACLC,OAAQR,GAAaI,MAG5B,kBAAC,IAAD,CAAOG,KAAK,SACLC,OAAQ,kBAAM,kBAAC,GAAD,SAErB,kBAAC,IAAD,CAAOD,KAAK,SACLC,OAAQ,kBAAM,kBAAC,GAAD,WAnBtB,kBAAC1D,EAAA,EAAD,U,GARDC,IAAMC,WA2CpByD,GAAexD,YACfyD,IACAxD,aATkB,SAAC/F,GACnB,MAAO,CACH2H,YAAa3H,EAAMqI,IAAIV,eAOF,CAACwB,cJpCD,kBAAM,SAAC/G,GAClBA,EAASqE,MACfxI,MAAK,WACTmE,EALiC,CAACtC,KAvBd,+BI2DTgG,CAE4BoD,IAYhCM,GAVM,SAACxE,GAClB,OAAO,kBAAC,IAAD,KACH,kBAAC,IAAD,CAAUwD,MAAOA,IACb,kBAACc,GAAD,SChEZG,IAASJ,OACL,kBAAC,GAAD,MAAiBK,SAASC,eAAe,SlB0HvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7L,MAAK,SAAA8L,GACjCA,EAAaC,iB,mMmBpGbC,EAAc,SAAC,GAAsD,EAArDC,MAAsD,IAAD,IAA9CC,KAAMC,EAAwC,EAAxCA,QAAQnD,EAAgC,EAAhCA,MAAQoD,EAAwB,EAAxBA,SACzCC,GADiE,2CACtDF,GAAWnD,GAC5B,OACI,yBAAKtG,UAAWC,IAAE2J,YAAc,KAAOD,EAAW1J,IAAEqG,MAAQ,KACxD,6BACKoD,GAEJC,GAAY,8BAAOrD,KAKnBuD,EAAW,SAACxF,GAAW,IACzBkF,EAAoClF,EAApCkF,MAAuBO,GAAazF,EAA7BmF,KAA6BnF,EAAvB0F,MADW,YACY1F,EADZ,2BAE/B,OAAO,kBAACiF,EAAgBjF,EAAO,8CAAckF,EAAWO,MAG/CrD,EAAQ,SAACpC,GAAW,IACtBkF,EAAoClF,EAApCkF,MAAuBO,GAAazF,EAA7BmF,KAA6BnF,EAAvB0F,MADQ,YACe1F,EADf,2BAE5B,OAAO,kBAACiF,EAAgBjF,EAAO,2CAAWkF,EAAWO,MA0B5CtD,EAAc,SAACwD,EAAalL,EAAMmL,EAAWC,GAAkC,IAAvB7F,EAAsB,uDAAf,GAAG8F,EAAY,uDAAP,GACjF,OAAO,6BACN,kBAAC,IAAD,eAAOH,YAAaA,EACblL,KAAMA,EACNmL,UAAWA,EACXG,SAAUF,GACN7F,IACR8F,K,gCCnFP,sCASenF,IANC,SAACX,GACb,OAAO,yBAAMgG,MAAQ,CAAEC,gBAAiB,UACpC,yBAAKzG,IAAK0G,IAAWtG,IAAK,Q,mBCJlCzE,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,gCCCzH,oEAAO,IAAMiH,EAAW,SAAA8D,GAEpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAE5C,GAAIA,EAAM5D,OAAQ8D,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCTjClL,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,aAAe,kC,mBCArHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,2NCM3Dd,EAAe,CACfgM,MAAO,CACH,CAAC9L,GAAI,EAAGG,QAAS,mBAAoB4L,WAAY,IACjD,CAAC/L,GAAI,EAAGG,QAAS,qBAAuB4L,WAAY,IACpD,CAAC/L,GAAI,EAAGG,QAAS,SAAU4L,WAAY,IACvC,CAAC/L,GAAI,EAAGG,QAAS,OAAQ4L,WAAY,KAEzCC,YAAa,mBACbC,QAAS,KACTrM,OAAO,IAoCEsM,EAAuB,SAACF,GAAD,MAAkB,CAAC1L,KAlDtC,WAkDqD0L,gBAEzDG,EAAY,SAACvM,GAAD,MAAa,CAACU,KAhDpB,aAgDsCV,WAI5CwM,EAAiB,SAACvN,GAAD,8CAAY,WAAO+D,GAAP,eAAAG,EAAA,sEACjB3E,IAASa,WAAWJ,GADH,OAClCH,EADkC,OAElCkE,EAPoC,CAACtC,KAhDpB,mBAgD4C2L,QAOrCvN,EAASC,OAFC,2CAAZ,uDAMjBe,EAAY,SAACb,GAAD,8CAAY,WAAO+D,GAAP,eAAAG,EAAA,sEACZ7D,IAAWQ,UAAUb,GADT,OAC7BH,EAD6B,OAE7BkE,EAASuJ,EAAUzN,EAASC,OAFC,2CAAZ,uDAMZgB,EAAe,SAACC,GAAD,8CAAY,WAAOgD,GAAP,SAAAG,EAAA,sEACd7D,IAAWS,aAAaC,GADV,OAEA,IAFA,OAEnBjB,KAAKqE,YACdJ,EAASuJ,EAAUvM,IAHS,2CAAZ,uDASb6I,IA5DQ,WAAmC,IAAlCjI,EAAiC,uDAAzBV,EAAcW,EAAW,uCAErD,OAAOA,EAAOH,MACV,IApBS,WAqBL,IAAI+L,EAAU,CACVrM,GAAI,EACJG,QAASM,EAAOuL,YAChBD,WAAY,GAEhB,OAAO,2BACAvL,GADP,IAEIsL,MAAM,GAAD,mBAAMtL,EAAMsL,OAAZ,CAAmBO,MAKhC,IA9BiB,mBA+Bb,OAAO,2BAAI7L,GAAX,IAAkByL,QAASxL,EAAOwL,UAEtC,IAhCW,aAiCP,OAAO,2BAAIzL,GAAX,IAAkBZ,OAAQa,EAAOb,SAErC,IAtCY,cAuCR,kCAAUY,GAAV,IAAiBsL,MAAOtL,EAAMsL,MAAM1I,QAAO,SAAAoB,GAAC,OAAGA,EAAExE,KAAMS,EAAO6L,YAIlE,QACI,OAAO9L,M","file":"static/js/main.5a7be95b.chunk.js","sourcesContent":["import * as axios from \"axios\";\n\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers:     {\n        \"API-KEY\": \"d815e466-8076-4a88-8dcb-7a359475031b\"\n    }\n});\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => {\n                return response.data;\n            });\n    },\n    follow(userId) {\n        return instance.post(`follow/${userId}`)\n    },\n    unfollow(userId) {\n        return instance.delete(`follow/${userId}`)\n    },\n    getProfile(userId) {\n        return profileAPI.getProfile(userId)\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email,password,rememberMe=false){\n        return instance.post(`auth/login`, {email,password,rememberMe})\n    },\n    logout(){\n        return instance.delete(`auth/login`)\n    }\n}\nexport const profileAPI = {\n\n    getProfile(userId) {\n        return instance.get(`profile/` + userId);\n    },\n    getStatus(userId) {\n        return instance.get(`profile/status/` + userId);\n    },\n    updateStatus(status) {\n        return instance.put(`profile/status`,{status:status});\n    },\n}\n\n","const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ],\r\n\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody) => ({type: SEND_MESSAGE, newMessageBody})\r\nexport const updateNewMessageBodyCreator = (body) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body})\r\n\r\nexport default dialogsReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__34QKd\"};","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.6c3daf60.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3MJiS\",\"item\":\"Navbar_item__22SpW\",\"activeLink\":\"Navbar_activeLink__z2C_k\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","export const updateObjectInArray = (items,itemId,objPropName,newObjProps) =>{\r\n\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {authAPI, usersAPI} from \"../api/api\";\nimport {updateObjectInArray} from \"../untils/object-helpers\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: []\n};\n\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FOLLOW:\n\n            return {\n                ...state,\n\n                users:updateObjectInArray(state.users,action.userId,\"id\",{followed: true})\n              /*  users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })*/\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users:updateObjectInArray(state.users,action.userId,\"id\",{followed: false})\n               /* users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })*/\n            }\n        case SET_USERS: {\n            return {...state, users: action.users}\n        }\n        case SET_CURRENT_PAGE: {\n            return {...state, currentPage: action.currentPage}\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return {...state, totalUsersCount: action.count}\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {...state, isFetching: action.isFetching}\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\nexport const setUsers = (users) => ({type: SET_USERS, users})\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n})\n\nexport const requestUsers = (currentPage, pageSize) => {\n    return async (dispatch) => {\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(currentPage))\n        let response = await usersAPI.getUsers(currentPage, pageSize)\n        dispatch(toggleIsFetching(false));\n        dispatch(setUsers(response.items));\n        dispatch(setTotalUsersCount(response.totalCount));\n\n    }\n}\n\nconst followUnfollowFlow= async(dispatch,userId,apiMethod,actionCreator)=>{\n    dispatch(toggleFollowingProgress(true, userId));\n    let response = await apiMethod(userId)\n\n    if (response.data.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(toggleFollowingProgress(false, userId));\n}\n\nexport const follow = (userId) => {\n    return async (dispatch) => {\n        let apiMethod = usersAPI.follow.bind(usersAPI)\n        await followUnfollowFlow(dispatch, userId, apiMethod, followSuccess)\n\n\n    }\n}\nexport const unfollow = (userId) => {\n    return async (dispatch) => {\n        let apiMethod = usersAPI.unfollow.bind(usersAPI)\n        await followUnfollowFlow(dispatch, userId, apiMethod, unfollowSuccess)\n\n\n    }\n}\n\nexport default usersReducer;\n","import React, {useState} from 'react';\nimport styles from \"./Paginator.module.css\";\nimport cn from \"classnames\";\n\n\nlet Paginator = ({totalItemsCount,pageSize,currentPage,onPageChanged, portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n\n    return <div className={styles.paginator}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n        {pages\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n            .map((p) => {\n                return <span className={ cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n\n    { portionCount > portionNumber &&\n    <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n\n\n    </div>\n}\n\nexport default Paginator;\n","import React from 'react';\nimport styles from \"./users.module.css\";\nimport userPhoto from \"../../assets/images/user.png\";\nimport {NavLink} from \"react-router-dom\";\n\n\n\nlet User = ({user, followingInProgress, unfollow, follow, }) => {\n    return <div>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ?\n                            user.photos.small : userPhoto}\n                             className={styles.userPhoto}\n                        alt={''}/>\n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button disabled={followingInProgress\n                                .some(id => id === user.id)}\n                                      onClick={() => { unfollow(user.id) }}>\n                                Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => { follow(user.id) }}>\n                                      Follow</button>}\n\n                    </div>\n                </span>\n                <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{\"user.location.country\"}</div>\n                        <div>{\"user.location.city\"}</div>\n                    </span>\n                </span>\n            </div>\n        }\n\n\n\nexport default User;\n","import React from 'react';\n\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\n\n\nlet Users = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\n\n    return <div>\n        <Paginator currentPage={currentPage}\n                   onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount}\n                   pageSize={pageSize}/>\n        <div>\n            {users.map(u => <User user={u}\n                                  followingInProgress={props.followingInProgress}\n                                  unfollow={props.unfollow}\n                                  follow={props.follow}\n                                  key={u.id}/>\n            )\n            }\n        </div>\n    </div>\n}\n\nexport default Users;\n","import {createSelector} from \"reselect\";\r\n\r\nexport const getUsers = (state) => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getUsersSuperSelector = createSelector(getUsers,\r\n    (users) => {\r\n        return users.filter(u=>true);\r\n    })\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {\n    follow,\n    setCurrentPage,\n    unfollow, toggleFollowingProgress, requestUsers\n} from '../../redux/users-reducer';\nimport Users from './Users';\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount, getUsers,\n} from \"../../redux/users-selectors\";\n\n\n\nclass UsersContainer extends React.Component {\n    componentDidMount() {\n        const {currentPage,pageSize}=this.props\n        this.props.requestUsers(currentPage, pageSize);\n    }\n\n    onPageChanged = (pageNumber) => {\n        const {pageSize}=this.props\n        this.props.requestUsers(pageNumber, pageSize);\n    }\n\n    render() {\n        return <>\n            { this.props.isFetching ? <Preloader /> : null }\n            <Users totalUsersCount={this.props.totalUsersCount}\n                        pageSize={this.props.pageSize}\n                        currentPage={this.props.currentPage}\n                        onPageChanged={this.onPageChanged}\n                        users={this.props.users}\n                        follow={this.props.follow}\n                        unfollow={this.props.unfollow}\n                        followingInProgress={this.props.followingInProgress}\n             />\n        </>\n    }\n}\n\n/*let mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        followingInProgress: state.usersPage.followingInProgress\n    }\n}*/\n\nlet mapStateToProps = (state) => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n\n\nexport default compose(\n    connect(mapStateToProps,{follow, unfollow, setCurrentPage, toggleFollowingProgress, requestUsers })\n)(UsersContainer)\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n\r\n        <div className={s.loginBlock}>\r\n            { props.isAuth\r\n                ? <div> {props.login} - <button onClick={props.logout} >Log Out</button>  </div>\r\n                : <NavLink to={'/login'}>Login</NavLink> }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;\r\n","import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'samurai_network/auth/SET_USER_DATA';\n\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n\n            return {\n                ...state,\n                ...action.payload,\n\n            }\n\n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = (userId, email, login,isAuth) => ({type: SET_USER_DATA, payload: {userId, email, login,isAuth}  })\n\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.me()\n            if (response.data.resultCode === 0) {\n                let {id, login, email} = response.data.data;\n                dispatch(setAuthUserData(id, email, login,true));\n            }\n        };\n\nexport const login = (email,password,rememberMe) => async (dispatch) => {\n\n    let response = await authAPI.login(email, password, rememberMe)\n\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n    } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n}\n\nexport const logout = (email,password,rememberMe) => async (dispatch) => {\n    let response = await authAPI.logout()\n\n            if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null,null,null,false));\n            }\n\n}\n\n\nexport default authReducer;\n","import React from 'react';\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport { logout} from \"../../redux/auth-reducer\";\n\n\nclass HeaderContainer extends React.Component {\n\n\n    render() {\n        return <Header {...this.props} />\n    }\n}\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login,\n});\n\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\n","import React from 'react';\nimport {Field, reduxForm} from \"redux-form\";\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../untils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport s from '../common/FormsControls/FormControls.module.css'\n\nconst LoginForm = ({handleSubmit, error}) => {\n    return <form onSubmit={handleSubmit}>\n        {createField('Email', 'email', Input, [required])}\n        {createField('Password', 'password', Input, [required],{type:'password'})}\n        {createField(null, 'rememberMe', Input, [],{type:'checkbox'},'remember me')}\n        {/* <Field placeholder={'Email'}\n                   name={'email'}\n                   component={Input}\n                   validate={[required]}\n            />*/}\n        {/*<div>\n            <Field placeholder={'Password'}\n                   name={'password'}\n                   component={Input}\n                   type={'password'}\n                   validate={[required]}\n            />\n        </div>*/}\n        {/*<div>\n            <Field component={Input}\n                   name={'rememberMe'}\n                   type={'checkbox'}\n\n            /> remember me\n        </div>*/}\n        {error && <div className={s.formSummaryError}>\n            {error}\n        </div>}\n        <div>\n            <button>Log in</button>\n        </div>\n    </form>\n}\n\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\n\nconst Login = (props) => {\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe)\n    }\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n    return <div>\n        <h1> LOGIN</h1>\n        <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n}\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n\n});\nexport default connect(mapStateToProps, {login})(Login);\n","import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {getAuthUserData} from \"./auth-reducer\";\n\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\n\n\nlet initialState = {\n    initialized: false,\n};\n\nconst appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n\n            return {\n                ...state,\n                initialized: true,\n\n            }\n\n        default:\n            return state;\n    }\n}\n\n\nexport const initialisedSuccess = () => ({type: INITIALIZED_SUCCESS})\n\nexport const initializeApp = () => (dispatch) => {\n    let promise = dispatch(getAuthUserData());\n    promise.then(() => {\n        dispatch(initialisedSuccess());\n    })\n\n}\n/*export const initializeApp = () => async (dispatch) => {\n    await dispatch(getAuthUserData());\n    dispatch(setInitializedSuccess());\n};*/\n\nexport default appReducer;\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app:appReducer,\r\n});\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//let store = createStore(reducers, applyMiddleware(thunkMiddleware),);\r\n\r\nwindow.__store__ = store;\r\n\r\n\r\nexport default store;\r\n","import React, {Suspense} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport Preloader from \"../components/common/Preloader/Preloader\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withSuspense = (Component) => {\n\n\n    return (props)=>{\n        return <Suspense fallback={<div><Preloader /></div>}>\n        <Component {...props}/>\n        </Suspense>\n    }\n\n}\n","import React, {Suspense} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\n\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport store from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n//import ProfileContainer from \"./components/Profile/ProfileContainer\";\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs'\n                           render={withSuspense(DialogsContainer)}/>\n\n                    <Route path='/profile/:userId?'\n                           render={withSuspense(ProfileContainer)}/>\n\n\n                    <Route path='/users'\n                           render={() => <UsersContainer/>}/>\n\n                    <Route path='/login'\n                           render={() => <LoginPage/>}/>\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\n\nlet AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\nconst SamuraiJSApp = (props) => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n\n}\n\n\nexport default SamuraiJSApp\n","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from \"./App\";\n\nReactDOM.render(\n    <SamuraiJSApp/>, document.getElementById('root'));\n\n\n// API\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport s from './FormControls.module.css'\r\nimport {required} from \"../../../untils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\n/*export const Textarea = ({input,meta,...props}) => {\r\nconst hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error:'')}>\r\n            <div>\r\n            <textarea {...input} {...props} />\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n</div>\r\n)\r\n}\r\n\r\n\r\nexport const Input = ({input,meta,...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error:'')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\n\r\nconst FormControl = ({input, meta:{touched,error}, children, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n/*\r\n\r\n\r\nconst Element = Element => ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={ s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n            <Element {...input} {...props} />\r\n            { hasError && <span> { meta.error } </span> }\r\n        </div>\r\n    );\r\n};\r\n\r\nА потом просто его импортим в компоненту формы, вызываем как\r\n\r\nconst Textarea = Element(\"textarea\");\r\n\r\nи передаем\r\n\r\n<Field component={Textarea} .../>\r\n\r\nВсе работает!)*/\r\n\r\n\r\nexport const createField = (placeholder, name, component, validators,props ={},text='') => {\r\n   return <div>\r\n    <Field placeholder={placeholder}\r\n           name={name}\r\n           component={component}\r\n           validate={validators}\r\n           {...props}\r\n    />{text}\r\n    </div>\r\n}\r\n\r\n","import React from 'react';\nimport preloader from \"../../../assets/images/preloader.svg\";\n\nlet Preloader = (props) => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} alt={''} />\n    </div>\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1wUY4\",\"error\":\"FormControls_error__2MHrb\",\"formSummaryError\":\"FormControls_formSummaryError__2jCNt\"};","\r\n\r\nexport const required = value => {\r\n\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value)=> {\r\n\r\n    if (value.length >maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\nexport const maxLength30 = value => {\r\n\r\n    if (value && value.length >30) return 'Max length is 30 symbols';\r\n    return 'Field is required'\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3_c4E\",\"pageNumber\":\"Paginator_pageNumber__3otYe\",\"selectedPage\":\"Paginator_selectedPage__1xl2T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__27kSy\",\"loginBlock\":\"Header_loginBlock__2g5v2\"};","import {authAPI, profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ],\r\n    newPostText: 'it-kamasutra.com',\r\n    profile: null,\r\n    status:''\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n\r\n            };\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case DELETE_POST:\r\n            return{...state, posts: state.posts.filter(p=> p.id !==action.postId)\r\n\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newPostText) => ({type: ADD_POST,newPostText})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const deletepost = (postId) => ({type: DELETE_POST, postId})\r\n\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data));\r\n\r\n}\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data));\r\n\r\n}\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n    let response = await  profileAPI.updateStatus(status)\r\n        if (response.data.resultCode ===0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n\r\n}\r\n\r\n\r\nexport default profileReducer;\r\n"],"sourceRoot":""}